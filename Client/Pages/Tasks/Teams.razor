@page "/teams"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Administrator, Kontaktperson")]

<AuthorizeView>
    <Authorized>

        <h2>VAGTPLAN FOR TEAMS</h2>
        <p>Liste over alle vagter</p>

        @if (taskList == null)
        {
            <p><em>Indlæser, vent venligst...</em></p>
        }
        else
        {
            <div class="form-group">
                <label asp-for="categories" class="control-label">
                    Vælg en jobkategori
                </label>
                <select asp-for="categories" class="form-control"
                        @bind="category"
                        @onclick="@(async () => await GetTaskCategory(category))">
                    <option value="Alle"> Vis alle kategorier</option>
                    <option value="Sceneopsætning"> Sceneopsætning</option>
                    <option value="Rengøring">Rengøring</option>
                    <option value="Bar">Bar</option>
                    <option value="Entre">Entre</option>
                    <option value="Vagt">Vagt</option>
                    <option value="Madbod">Madbod</option>
                    <option value="Backstage">Backstage</option>
                    <option value="Andet">Andet</option>
                </select>
            </div>

            <table class="table table-borderless table-openair table-hover">
                <thead>
                    <tr>
                        <th>Jobkategori</th>
                        <th>Beskrivelse</th>
                        <th>Lokation</th>
                        <th>Koordinator</th>
                        <th>Starttid</th>
                        <th>Sluttid</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var _task in taskList)
                    {
                        @if (_task.Type == "Kontaktperson")
                        {
                            <tr>
                                <td>@_task.Category</td>
                                <td>@_task.Description</td>
                                <td>@_task.Location</td>
                                <td>@_task.User</td>
                                <td>@_task.StartTime.ToString("dd-MM-yyyy HH:mm")</td>
                                <td>@_task.StopTime.ToString("dd-MM-yyyy HH:mm")</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        }

    </Authorized>
    <NotAuthorized>
        <p>Du har ikke adgang til denne side.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ApplicationTask> taskList;
    public string category;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            await GetTasks();
        }
    }
    protected async Task GetTasks()
    {
        taskList = await Http.GetFromJsonAsync<List<ApplicationTask>>("Task");
    }

    protected async Task GetTaskCategory(string _category)
    {
        if (_category == "Alle" || _category == null)
        {
            await GetTasks();
        }
        else
        {
            taskList = await Http.GetFromJsonAsync<List<ApplicationTask>>("Task/Category/" + _category);
        }
    }

}