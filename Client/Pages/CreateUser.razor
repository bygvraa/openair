@page "/createuser"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject IJSRuntime js

<h3>Lav en bruger</h3>
<hr />

<div class="row" style=" text-align: center; place-content: center">
    <div class="col-md-4">

        <form>
            <div class="form-group">
                <input for="first_name" class="form-control" placeholder="Fornavn" @bind="@user.FirstName" />
            </div>
            <div class="form-group">
                <input for="last_name" class="form-control" placeholder="Efternavn" @bind="@user.LastName" />
            </div>
            <div class="form-group">
                <input for="age" class="form-control" placeholder="Alder" @bind="@user.BirthDate" />
            </div>
            <div class="form-group">
                <input for="email" class="form-control" placeholder="Email" @bind="@user.Email" />
            </div>
            <div class="form-group">
                <input for="password" class="form-control" placeholder="Adgangskode" @bind="@user.Password" />
            </div>
            <div class="form-group">
                <input type="button" class="btn btn-danger" @onclick="@Cancel" value="Fortryd" />
                <input type="button" class="btn btn-success" @onclick="@(async () => await AddUser())" value="Opret bruger" />
            </div>
        </form>
    </div>
</div>

@code {
    ApplicationUser user = new ApplicationUser();
    ApplicationUser[] users;

    protected override async Task OnInitializedAsync()
    {
        users = await Http.GetFromJsonAsync<ApplicationUser[]>("User");
    }

    async Task AddUser()    
    {
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to create user {user.FirstName}?"))
        {
            foreach (var _user in users)
            {
                if (_user.Email == user.Email)
                {
                    await js.InvokeVoidAsync("alert", "Email is already in use");
                    break;
                }
                else if (_user.Email != user.Email && !string.IsNullOrEmpty(user.FirstName) && !string.IsNullOrEmpty(user.LastName) && !string.IsNullOrEmpty(user.Email) && !string.IsNullOrEmpty(user.Password))
                {
                    await Http.PostAsJsonAsync("User", new ApplicationUser(user.Id, user.FirstName, user.LastName, user.Email, user.Password, user.BirthDate, user.Created));
                    await js.InvokeVoidAsync("alert", $"Created successfully!");
                    UriHelper.NavigateTo("/");
                    break;
                }
            }

        }
        else
        {
            await js.InvokeVoidAsync("alert", "Pls fill out all fields correctly");
        }
    }

    void Cancel()
    {
        UriHelper.NavigateTo("Users");
    }

}