@page "/createtask"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

    <h2>Opret en vagt</h2>
    <br />

    <div class="row" style=" text-align: center; place-content: center">
        <div class="col-md-4 text-left">

            <EditForm Model="task" OnValidSubmit="@(async () => await AddTask())">
                <div class="form-group">
                    <label for="types">Vælg en vagttype</label>
                    <select class="form-control" @bind="task.Type">
                        <option value="">--Vælg--</option>
                        <option value="Frivillig">Frivillig</option>
                        <option value="Kontaktperson">Kontaktperson</option>
                    </select>
                </div>

                <div class="form-group">
                    <label for="categories">Vælg en jobkategori</label>
                    <select class="form-control" @bind="task.Category">
                        <option value="">--Vælg--</option>
                        <option value="Sceneopsætning">Sceneopsætning</option>
                        <option value="Rengøring">Rengøring</option>
                        <option value="Bar">Bar</option>
                        <option value="Entre">Entre</option>
                        <option value="Vagt">Vagt</option>
                        <option value="Madbod">Madbod</option>
                        <option value="Backstage">Backstage</option>
                        <option value="Andet">Andet</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Beskrivelse</label>
                    <input for="description" class="form-control"
                            placeholder="Beskrivelse"
                            @bind="task.Description" />
                </div>
                <div class="form-group">
                    <label>Koordinator</label>
                    <input for="volunteer" class="form-control"
                            placeholder="Frivillig"
                            @bind="task.User" />
                </div>
                <div class="form-group">
                    <label>Lokation</label>
                    <input for="location" class="form-control"
                            placeholder="Lokation"
                            @bind="task.Location" />
                </div>

                <div class="form-group">
                    <label>Starttidspunkt</label>
                    <input for="starttime" class="form-control" type="datetime-local"
                            min="@todayDateTime"
                            @bind="task.StartTime"
                            @bind:format="yyyy-MM-ddTHH:mm" />
                </div>

                <div class="form-group">
                    <label>Sluttidspunkt</label>
                    <input for="stoptime" class="form-control" type="datetime-local"
                            min="@todayDateTime"
                            @bind="task.StopTime"
                            @bind:format="yyyy-MM-ddTHH:mm" />
                </div>

                <div class="form-group text-center">
                    <input type="reset" class="btn btn-warning" @onclick="@Cancel" value="Fortryd" />
                    <input type="submit" class="btn btn-success" value="Opret en vagt" />
                </div>
            </EditForm>

        </div>
    </div>


@code {
    //private List<ApplicationTask> taskList;
    private ApplicationTask task;


    string todayDateTime = (DateTime.Now.ToString("yyyy-MM-dd")) + "T00:00";

    //protected override async Task OnInitializedAsync()
    //{
    //    var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //    var user = authState.User;

    //    if (user.Identity.IsAuthenticated)
    //    {
    //        await GetTasks();
    //    }
    //}

    //protected async Task GetTasks()
    //{
    //    taskList = await Http.GetFromJsonAsync<List<ApplicationTask>>("Task");
    //}

    protected async Task AddTask()
    {
        await Http.PostAsJsonAsync<ApplicationTask>("Task/", task);
        UriHelper.NavigateTo("/koordinator");
    }

    void Cancel()
    {
        UriHelper.NavigateTo("/koordinator");
    }

}