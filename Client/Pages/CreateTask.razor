@page "/createtask"
@using OpenAir.Shared.Models
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject IJSRuntime js

<h3>Opret en vagt</h3>
<hr />

<div class="row" style=" text-align: center; place-content: center">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                <input for="description" class="form-control" placeholder="Beskrivelse" @bind="@task.description" />
            </div>
            <div class="form-group">
                <input for="volunteer" class="form-control" placeholder="Frivillig" @bind="@task.volunteer" />
            </div>
            <div class="form-group">
                <input for="location" class="form-control" placeholder="Lokation" @bind="@task.location" />
            </div>
            <div class="form-group">
                <input for="starttime" class="form-control" placeholder="Start tid" @bind="@task.starttime" />
            </div>
            <div class="form-group">
                <input for="stoptime" class="form-control" placeholder="Slut tid" @bind="@task.stoptime" />
            </div>
            <div class="form-group">
                <input type="button" class="btn btn-danger" @onclick="@Cancel" value="Fortryd" />
                <input type="button" class="btn btn-success" @onclick="@(async () => await AddTask())" value="Opret en vagt" />
            </div>
        </form>

    </div>
</div>

@code {
    TaskClass task = new TaskClass();
    TaskClass[] tasks;

    protected override async Task OnInitializedAsync()
    {
        tasks = await Http.GetFromJsonAsync<TaskClass[]>("Task");
      
    }

    async Task AddTask()
    {
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to create task {task.description}?"))
        {
            foreach (var _task in tasks)
            {
                if (_task.description != task.description && !string.IsNullOrEmpty(task.volunteer) && !string.IsNullOrEmpty(task.location) && !DateTime.UtcNow(task.starttime) && !DateTime.IsNullOrEmpty(task.stoptime))
                {
                    await Http.PostAsJsonAsync("Task", new TaskClass(task.description, task.volunteer, task.location, task.starttime, task.stoptime));
                    await js.InvokeVoidAsync("alert", $"Created successfully!");
                    UriHelper.NavigateTo("/koordinator");
                    break;
                }
            }

        }
        else
        {
            await js.InvokeVoidAsync("alert", "Pls fill out all fields correctly");
        }
    }

    void Cancel()
    {
        UriHelper.NavigateTo("/koordinator");
    }

}
