@page "/createticket"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject IJSRuntime js

@attribute [Authorize(Roles = "Administrator, Frivillig")]

<h3>RESERVER BILLET</h3>
<hr />

<div class="row" style=" text-align: center; place-content: center">
    <div class="col-md-4">
        <EditForm Model="ticket" OnValidSubmit="@(async () => await AddTicket())">
            <div class="form-group">
                <label for="Title">Vælg en billet</label>
                <select class="form-control" @bind="@ticket.Title">


                    <option value="">--Vælg--</option>
                    <option value="PARTOUT">PARTOUT</option>
                    <option value="TORSDAG">TORSDAG</option>
                    <option value="FREDAG">FREDAG</option>
                    <option value="LØRDAG">LØRDAG</option>
                </select>
            </div>
            <div class="form-group">
                <input for="Antal" class="form-control" placeholder="Antal" @bind="@ticket.Price" />
            </div>
            <div class="form-group">
                <input for="Email" class="form-control" placeholder="Email" @bind="@ticket.Email" />
            </div>
            <div class="form-group">
                <input type="button" class="btn btn-danger" @onclick="@Cancel" value="Fortryd" />
                <input type="button" class="btn btn-success" @onclick="@(async () => await AddTicket())" value="Reserver Billet" />
            </div>
            </EditForm>
    </div>
</div>

@code {
    TicketClass ticket = new TicketClass();
    TicketClass[] ticketsss;

    protected override async Task OnInitializedAsync()
    {
        ticketsss = await Http.GetFromJsonAsync<TicketClass[]>("Ticket");
    }

    async Task AddTicket()
    {
        if (await js.InvokeAsync<bool>("confirm", $"Vil du resevere {ticket.Price + " billetter til " + ticket.Title}?"))
        {
            foreach (var _ticket in ticketsss)
            {
                if (_ticket.Id != ticket.Id && !string.IsNullOrEmpty(ticket.Title))
                {

                    await Http.PostAsJsonAsync("ticket", new TicketClass(ticket.Id, ticket.Title, ticket.Price, ticket.Email));
                    await js.InvokeVoidAsync("alert", $"Reseveret");
                    UriHelper.NavigateTo("/cart");
                }
                else
                {
                    await js.InvokeVoidAsync("alert", "Pls fill out all fields correctly");
                }
                break;
            }

        }
    }

    void Cancel()
    {
        UriHelper.NavigateTo("ticket");
    }
}
