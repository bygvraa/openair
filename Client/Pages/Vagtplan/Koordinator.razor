@page "/koordinator"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Administrator, Koordinator")]

<AuthorizeView>
    <Authorized>

        <h2>KOORDINATORSIDE</h2>
        <p>Side til at administrere vagter for frivillige og kontaktpersoner for diverse foreninger.</p>

        <div style="text-align: right; margin-bottom: 5px">
            <button type="button" class="btn btn-success"
                    @onclick='@(() => UriHelper.NavigateTo("/createtask"))'>
                Opret vagt
            </button>
        </div>

        @if (taskList == null)
        {
            <p><em>Indlæser, vent venligst...</em></p>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-borderless table-openair table-hover">
                    <thead>
                        <tr>
                            <th>Jobgruppe</th>
                            <th>Jobkategori</th>
                            <th>Beskrivelse</th>
                            <th>Lokation</th>
                            <th>Koordinator</th>
                            <th>Frivillig</th>
                            <th>Starttid</th>
                            <th>Sluttid</th>
                            <th>&nbsp;</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var _task in taskList)
                        {
                            <tr>
                                <td>@_task.GetUserType()</td>
                                <td>@_task.GetCategory()</td>
                                <td>@_task.GetDescription()</td>
                                <td>@_task.GetLocation()</td>
                                <td>@_task.GetCoordinator()</td>
                                <td>@_task.GetVolunteer()</td>
                                <td>@_task.GetStartTime().ToString("dd-MM-yyyy HH:mm")</td>
                                <td>@_task.GetStopTime().ToString("dd-MM-yyyy HH:mm")</td>
                                <td class="text-right">
                                    <button class="btn btn-primary openair-blue-btn-sm btn-sm" @onclick="@(async () => await EditTask(_task.Id))">
                                        <span class="oi oi-wrench" aria-hidden="true"></span>
                                    </button>

                                    <button class="btn btn-danger openair-red-btn-sm btn-sm" @onclick="() => OpenDeleteDialog(_task)">
                                        <span class="oi oi-trash" aria-hidden="true"></span>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            if (isEdit)
            {
                <div class="modal fade show" tabindex="-1" style="display: block; background-color: rgba(247, 247, 247, .7)" aria-modal="true" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content modal-content-openair">
                            <div class="modal-header" style="border: none">
                                <h3 class="modal-title">Rediger vagt</h3>
                                <button type="button" class="close" @onclick="@this.CloseModal">
                                    <span aria-hidden="true">
                                        &times;
                                    </span>
                                </button>
                            </div>
                            <div class="modal-body modal-body-openair">
                                <form>
                                    <div class="form-group">

                                        <div class="form-group">
                                            <label for="types">Vælg en vagttype</label>
                                            <select class="form-control" @bind="@task.Type" required>
                                                <option title="" value="">--- Vælg ---</option>
                                                <option value="Frivillig">Frivillig</option>
                                                <option value="Kontaktperson">Kontaktperson</option>
                                            </select>
                                        </div>

                                        <div class="form-group">
                                            <label for="categories">Vælg en jobkategori</label>
                                            <select class="form-control" @bind="@task.Category" required>
                                                <option value="">--- Vælg ---</option>
                                                @foreach (var _category in Enum.GetValues(typeof(Category)))
                                                {
                                                    <option value="@_category">@_category</option>
                                                }
                                            </select>
                                        </div>

                                        <label for="description" class="control-label"> Beskrivelse</label>
                                        <textarea type="text" for="description" class="form-control" @bind="@task.Description" /><br />

                                        <label for="location" class="control-label"> Lokation</label>
                                        <input type="text" for="location" class="form-control" @bind="@task.Location" /><br />

                                        <label for="coordinator" class="control-label"> Koordinator</label>
                                        <input type="text" for="coordinator" class="form-control" @bind="@task.Coordinator" /><br />

                                        <label for="starttime" class="control-label"> Starttid</label>
                                        <input for="starttime" class="form-control" type="datetime-local"
                                               min="@todayDateTime"
                                               @bind="@task.StartTime"
                                               @bind:format="yyyy-MM-ddTHH:mm" />

                                        <label for="stoptime" class="control-label"> Sluttid</label>
                                        <input for="stoprime" class="form-control" type="datetime-local"
                                               min="@todayDateTime"
                                               @bind="@task.StopTime"
                                               @bind:format="yyyy-MM-ddTHH:mm" />

                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer" style="border: none">
                                <button type="button" class="btn btn-warning" @onclick="@CloseModal">
                                    Fortryd
                                </button>
                                <button type="button" class="btn btn-block btn-success" @onclick="@(async () => await SaveTask())" data-dismiss="modal">
                                    Gem
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        @if (DeleteDialogOpen)
        {
            <DeleteDialog Title="Fjern vagt"
                          Text="Er du sikker på, at du ønsker at slette denne vagt?"
                          OnClose="@CloseDeleteDialog">
            </DeleteDialog>
        }
    </Authorized>
    <NotAuthorized>
        <p>Du har ikke adgang til denne side.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ApplicationTask> taskList;
    private ApplicationTask task;

    string todayDateTime = (DateTime.Now.ToString("yyyy-MM-dd")) + "T00:00";


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            await GetTasks();
        }
    }

    protected async Task GetTasks()
    {
        taskList = await Http.GetFromJsonAsync<List<ApplicationTask>>("Task");
    }

    protected async Task EditTask(int id)
    {
        task = await Http.GetFromJsonAsync<ApplicationTask>("Task/" + id);

        this.isEdit = true;
        await GetTasks().ConfigureAwait(false);
    }

    protected async Task SaveTask()
    {
        await Http.PutAsJsonAsync("Task", task);

        this.isEdit = false;
        await GetTasks();
    }

    protected async Task DeleteTask(int id)
    {
        await Http.DeleteAsync("Task/" + id);
    }


    // Modal
    protected void CloseModal()
    {
        this.isEdit = false;
    }

    // Edit-task modal
    protected Boolean isEdit = false;

    // Delete-task modal
    public bool DeleteDialogOpen { get; set; }

    private void OpenDeleteDialog(ApplicationTask _task)
    {
        DeleteDialogOpen = true;
        task = _task;
        StateHasChanged();
    }

    private async Task CloseDeleteDialog(bool accepted)
    {
        if (accepted)
        {
            await DeleteTask(task.Id);
            taskList.Remove(task);
        }

        task = null;

        DeleteDialogOpen = false;
        StateHasChanged();
    }

}