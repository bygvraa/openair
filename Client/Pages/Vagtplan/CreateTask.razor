@page "/createtask"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Administrator, Koordinator")]

<h1>Opret en vagt</h1>
<br />

<div class="row text-center" style="place-content: center">
    <div class="col-md-4 text-left">

        <EditForm Model="task" OnValidSubmit="@(async () => await AddTask())">
            <div class="form-group">
                <label for="types">Vælg en vagttype</label>
                <select class="form-control" @bind="task.Type">
                    <option value="">--- Vælg ---</option>
                    @foreach (var _type in Enum.GetValues(typeof(UserType)))
                    {
                        <option value="@_type">@_type</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label for="categories">Vælg en jobkategori</label>
                <select class="form-control" @bind="task.Category">
                    <option value="">--- Vælg ---</option>
                    @foreach (var _category in Enum.GetValues(typeof(Category)))
                    {
                        <option value="@_category">@_category</option>
                    }
                </select>
            </div>

            <div class="form-group">
                <label>Beskrivelse</label>
                <textarea for="description" class="form-control"
                          placeholder="Beskrivelse"
                          @bind="task.Description" />
            </div>
            <div class="form-group">
                <label>Koordinator</label>
                <input for="volunteer" class="form-control"
                       placeholder="Navn på koordinator"
                       @bind="task.Coordinator" />
            </div>
            <div class="form-group">
                <label>Lokation</label>
                <input for="location" class="form-control"
                       placeholder="Lokation"
                       @bind="task.Location" />
            </div>

            <div class="form-group">
                <label>Starttidspunkt</label>
                <input for="starttime" class="form-control" type="datetime-local"
                       min="@todayDateTime"
                       @bind="task.StartTime"
                       @bind:format="yyyy-MM-ddTHH:mm" />
            </div>

            <div class="form-group">
                <label>Sluttidspunkt</label>
                <input for="stoptime" class="form-control" type="datetime-local"
                       min="@todayDateTime"
                       @bind="task.StopTime"
                       @bind:format="yyyy-MM-ddTHH:mm" />
            </div>

            <div class="form-group text-center">
                <input type="reset" class="btn btn-warning" @onclick="@Cancel" value="Fortryd" />
                <input type="submit" class="btn btn-success" value="Opret en vagt" />
            </div>
        </EditForm>

    </div>
</div>


@code {
    private ApplicationTask task = new ApplicationTask();

    string todayDateTime = (DateTime.Now.ToString("yyyy-MM-dd")) + "T00:00";


    protected async Task AddTask()
    {
        await Http.PostAsJsonAsync<ApplicationTask>("Task/", task);
        UriHelper.NavigateTo("/koordinator");
    }

    void Cancel()
    {
        UriHelper.NavigateTo("/koordinator");
    }

}