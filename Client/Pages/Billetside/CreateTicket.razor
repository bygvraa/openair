@page "/createticket"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js

@attribute [Authorize(Roles = "Administrator, Bruger, Frivillig")]

<h1 class="billet_overskrift">RESERVER BILLET</h1>
<hr />

<div class="row" style=" text-align: center; place-content: center">
    <div class="col-md-4">
        <EditForm Model="ticket" OnValidSubmit="@(async () => await AddTicket())">
            <div class="form-group">
                <label for="title">Vælg en billettype</label>
                <select for="title" class="form-control" @bind="@ticket.Title" @onclick="CheckIfValid" >
                    <option value="">-- Vælg --</option>
                    <option value="PARTOUT">PARTOUT</option>
                    <option value="TORSDAG">TORSDAG</option>
                    <option value="FREDAG">FREDAG</option>
                    <option value="LØRDAG">LØRDAG</option>
                </select>
            </div>
            <div class="form-group">
                <label for="amount">Antal billetter (maks 5 pr. person)</label>
                <input for="amount" class="form-control" type="number" placeholder="antal"
                       @bind="@ticket.Amount"
                       @onclick="CheckIfValid"
                       min="0"
                       max="5" />
            </div>
            <div class="form-group">
                <label for="email">Email til reservation</label>
                <input for="email" class="form-control" value="@currentUserEmail" />
            </div>
            <div class="form-group">
                <input type="button" class="btn btn-danger" @onclick="@Cancel" value="Fortryd" />
                <input type="submit" class="btn btn-success" @onclick="@(async () => await AddTicket())" value="Reserver" disabled="@formInvalid"/>
            </div>
        </EditForm>
    </div>
</div>

@code {
    TicketClass ticket = new TicketClass();
    TicketClass[] ticketsss;

    // Nuværende brugers email
    private string currentUserEmail;

    // Variabel til validering af form
    private bool formInvalid = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            ticketsss = await Http.GetFromJsonAsync<TicketClass[]>("Ticket");
            currentUserEmail = user.Identity.Name;
        }
    }

    async Task AddTicket()
    {
        if (await js.InvokeAsync<bool>("confirm", $"Vil du resevere {ticket.Amount + " billetter til " + ticket.Title}?"))
        {
            foreach (var _ticket in ticketsss)
            {
                if (_ticket.Id != ticket.Id && !string.IsNullOrEmpty(ticket.Title))
                {

                    await Http.PostAsJsonAsync("ticket", new TicketClass(ticket.Id, ticket.Title, ticket.Amount, currentUserEmail));
                    await js.InvokeVoidAsync("alert", $"Reseveret");
                    UriHelper.NavigateTo("/cart");
                }
                else
                {
                    await js.InvokeVoidAsync("alert", "Pls fill out all fields correctly");
                }
                break;
            }

        }
    }

    private void CheckIfValid()
    {
        if (ticket.Title != "" && ticket.Amount > 0)
        {
            formInvalid = false;
        }
        else
        {
            formInvalid = true;
        }
    }

    void Cancel()
    {
        UriHelper.NavigateTo("ticket");
    }
}
