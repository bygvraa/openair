@page "/Koordinator"
@using OpenAir.Shared.Models
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager UriHelper

<AuthorizeView>
    <Authorized>

        <div style="float: right; margin-bottom: 5px">
        <button type="button" class="btn btn-primary"
                @onclick='@(() => UriHelper.NavigateTo("/createtask"))'>
            Opret vagt
        </button>
        </div>

       

        <h1>Vagtplan</h1>

        @if (taskList == null)
        {
            <p><em>Loading..</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Opgave nr</th>
                        <th>Beskrivelse</th>
                        <th>Lokation</th>
                        <th>Frivillig</th>
                        <th>Start tid</th>
                        <th>Sluttid</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in taskList)
                    {
                        <tr>
                            <td>@task.task_id</td>
                            <td>@task.description</td>
                            <td>@task.location</td>
                            <td>@task.volunteer</td>
                            <td>@task.starttime</td>
                            <td>@task.stoptime</td>
                            <td></td>
                            <div>
                                <button type="button" @onclick="() => OpenDeleteDialog(task)">
                                    FJERN
                                </button>
                            </div>
                        </tr>
                    }
                </tbody>
            </table>
        }



        @if (DeleteDialogOpen)
        {
            <UserDialog Title="Fjern"
                        Text="Sikker?"
                        OnClose="@CloseDeleteDialog"
                        DialogType="UserDialog.Type.DeleteCancel">

            </UserDialog>
        }
    </Authorized>
    <NotAuthorized>
        <p>Du har ikke adgang til denne side.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<TaskClass> taskList;

    private TaskClass _task;

    //DELETE MODAL
    public bool DeleteDialogOpen { get; set; }
    private void OpenDeleteDialog(TaskClass task)
    {
        DeleteDialogOpen = true;
        _task = task;
        StateHasChanged();
    }


    private async Task CloseDeleteDialog(bool accepted)
    {
        if (accepted)
        {
            await Delete(_task.task_id);
            taskList.Remove(_task);
            _task = null;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
            taskList = await Http.GetFromJsonAsync<List<TaskClass>>("Task");
    }

    protected async Task Delete(int task_id)
    {
        await Http.DeleteAsync("Task/" + task_id);
    }
}