@page "/Koordinator"
@using OpenAir.Shared.Models
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager UriHelper

<AuthorizeView>
    <Authorized>



        <h1>Vagtplan</h1>
        <div style="float: right; margin-bottom: 5px">
            <button type="button" class="btn btn-primary"
                    @onclick='@(() => UriHelper.NavigateTo("/createtask"))'>
                Opret vagt
            </button>
        </div>
        @if (taskList == null)
        {
            <p><em>Loading..</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Opgave nr</th>
                        <th>Beskrivelse</th>
                        <th>Lokation</th>
                        <th>Frivillig</th>
                        <th>Start tid</th>
                        <th>Sluttid</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in taskList)
                    {
                    <tr>
                        <td>@task.task_id</td>
                        <td>@task.description</td>
                        <td>@task.location</td>
                        <td>@task.volunteer</td>
                        <td>@task.starttime</td>
                        <td>@task.stoptime</td>
                        <td>


                            <button class="btn btn-primary" @onclick="@(async () => await EditTask(task.task_id))">
                                Rediger
                            </button>

                            <button class="btn btn-danger btn-sm" type="button" @onclick="() => OpenDeleteDialog(task)">
                                FJERN
                            </button>
                        </td>
                    </tr>
                    }
                </tbody>
            </table>
       

        if (isEdit)
        {
        <div class="modal" tabindex="-1" style="display: block" role="dialog">
            <div class="modal-dialog">
                <div class="modal-content" style="background-color: #f7f7f7">
                    <div class="modal-header" style="border: none">
                        <h3 class="modal-title">RedigerTask</h3>
                        <button type="button" class="close" @onclick="@this.CloseModal">
                            <span aria-hidden="true">
                                X
                            </span>
                        </button>
                    </div>
                    <div class="modal-body" style=" overflow: auto; max-height: 75vh">
                        <form>
                            <div class="form-group">

                                <label for="TaskBeskrivelse" class="control-label"> Beskrivelse</label>
                                <input type="text" for="Beskrivelse" class="form-control" @bind="@_task.description" /><br />

                                <label for="TaskLokation" class="control-label"> Lokation</label>
                                <textarea type="text" for="TaskLokation" class="form-control" style="overflow-y: scroll; min-height: calc(1.5em + 0.75rem + 2px);" @bind="@_task.location" /><br />

                                <label for="TaskVolunteer" class="control-label">Frivillig</label>
                                <input type="text" for="TaskFrivillig" class="form-control" @bind="@_task.volunteer" /><br />

                                <label for="TaskStartTime" class="control-label"> Starttid</label>
                                <input type="text" for="TaskStartTime" class="form-control" @bind="@_task.starttime" /><br />

                                <label for="TaskStopTime" class="control-label"> Stoptid</label>
                                <input type="text" for="TaskStopTime" class="form-control" @bind="@_task.stoptime" /><br />

                            </div>
                        </form>
                    </div>
                    <div class="modal-footer" style="border: none">
                        <button class="btn btn-block btn-success" @onclick="@(async () => await SaveTask())" data-dismiss="modal">
                            Gem shelter
                        </button>
                    </div>
                </div>
            </div>
        </div>
        }


        }

        @if (DeleteDialogOpen)
        {
            <UserDialog Title="Fjern"
                        Text="Sikker?"
                        OnClose="@CloseDeleteDialog"
                        DialogType="UserDialog.Type.DeleteCancel">

            </UserDialog>
        }
    </Authorized>
    <NotAuthorized>
        <p>Du har ikke adgang til denne side.</p>
    </NotAuthorized>
</AuthorizeView>

@code {

    private List<TaskClass> taskList;

    private TaskClass _task;

    //Edit modal
    protected async Task GetTasks()
    {
        taskList = await Http.GetFromJsonAsync<List<TaskClass>>("Task");
    }

    protected Boolean isEdit = false;

    protected async Task EditTask(int task_id)
    {
        _task = await Http.GetFromJsonAsync<TaskClass>("Task/" + task_id);

        this.isEdit = true;
        await GetTasks().ConfigureAwait(false);
    }

    protected async Task SaveTask()
    {
        Console.WriteLine("HALLØJ");
        await Http.PutAsJsonAsync("Task", _task);

        this.isEdit = false;

        Console.WriteLine("Hej");
        await GetTasks();


    }




    //DELETE MODAL
    public bool DeleteDialogOpen { get; set; }
    private void OpenDeleteDialog(TaskClass task)
    {
        DeleteDialogOpen = true;
        _task = task;
        StateHasChanged();
    }


    private async Task CloseDeleteDialog(bool accepted)
    {
        if (accepted)
        {
            await Delete(_task.task_id);
            taskList.Remove(_task);
            _task = null;
        }

        DeleteDialogOpen = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
            taskList = await Http.GetFromJsonAsync<List<TaskClass>>("Task");
    }

    protected async Task Delete(int task_id)
    {
        await Http.DeleteAsync("Task/" + task_id);
    }

    protected void CloseModal()
    {
        this.isEdit = false;

    }

}