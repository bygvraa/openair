@page "/koordinator"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>

        <h2>Vagtplan</h2>
        <p>Liste over alle vagter</p>

        <div style="float: right; margin-bottom: 5px">
            <button type="button" class="btn btn-primary"
                    @onclick='@(() => UriHelper.NavigateTo("/createtask"))'>
                Opret vagt
            </button>
        </div>

        @if (taskList == null)
        {
            <p><em>Indlæser, vent venligst...</em></p>
        }
        else
        {
            <table class="table table-borderless table-openair table-hover">
                <thead>
                    <tr>
                        <th>Beskrivelse</th>
                        <th>Lokation</th>
                        <th>Frivillig</th>
                        <th>Start tid</th>
                        <th>Sluttid</th>
                        <th style="width: 0px">&nbsp;</th>
                        <th style="width: 0px">&nbsp;</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var _task in taskList)
                    {
                        <tr>
                            <td>@_task.description</td>
                            <td>@_task.location</td>
                            <td>@_task.volunteer</td>
                            <td>@_task.starttime.ToString("dd-MM-yyyy HH:mm")</td>
                            <td>@_task.stoptime.ToString("dd-MM-yyyy HH:mm")</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="@(async () => await EditTask(_task.task_id))">
                                    Rediger
                                </button>
                            </td>
                            <td>
                                <button class="btn btn-danger btn-sm" @onclick="() => OpenDeleteDialog(_task)">
                                    Fjern
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            if (isEdit)
            {
                <div class="modal" tabindex="-1" style="display: block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content modal-openair">
                            <div class="modal-header" style="border: none">
                                <h3 class="modal-title">Rediger vagt</h3>
                                <button type="button" class="close" @onclick="@this.CloseModal">
                                    <span aria-hidden="true">
                                        &times;
                                    </span>
                                </button>
                            </div>
                            <div class="modal-body" style=" overflow: auto; max-height: 75vh">
                                <form>
                                    <div class="form-group">

                                        <label for="TaskBeskrivelse" class="control-label"> Beskrivelse</label>
                                        <textarea type="text" for="TaskBeskrivelse" class="form-control" @bind="@task.description" /><br />

                                        <label for="TaskLokation" class="control-label"> Lokation</label>
                                        <input type="text" for="TaskLokation" class="form-control" @bind="@task.location" /><br />

                                        <label for="TaskVolunteer" class="control-label"> Frivillig</label>
                                        <input type="text" for="TaskFrivillig" class="form-control" @bind="@task.volunteer" /><br />

                                        <label for="TaskStartTime" class="control-label"> Starttid</label>
                                        <input for="TaskStartTime" class="form-control" type="datetime-local"
                                               min="@todayDateTime"
                                               @bind="@task.starttime"
                                               @bind:format="yyyy-MM-ddTHH:mm" />

                                        <label for="TaskStopTime" class="control-label"> Stoptid</label>
                                        <input for="TaskStopTime" class="form-control" type="datetime-local"
                                               min="@todayDateTime"
                                               @bind="@task.stoptime"
                                               @bind:format="yyyy-MM-ddTHH:mm" />

                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer" style="border: none">
                                <button type="button" class="btn btn-warning" @onclick="@CloseModal">
                                    Fortryd
                                </button>
                                <button type="button" class="btn btn-block btn-success" @onclick="@(async () => await SaveTask())" data-dismiss="modal">
                                    Gem
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        @if (DeleteDialogOpen)
        {
            <UserDialog Title="Fjern vagt"
                        Text="Er du sikker på, at du ønsker at slette denne vagt?"
                        OnClose="@CloseDeleteDialog"
                        DialogType="UserDialog.Type.DeleteCancel">

            </UserDialog>
        }
    </Authorized>
    <NotAuthorized>
        <p>Du har ikke adgang til denne side.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<TaskClass> taskList;
    private TaskClass task;

    string todayDateTime = (DateTime.Now.ToString("yyyy-MM-dd")) + "T00:00";


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            await GetTasks();
        }
    }

    protected async Task GetTasks()
    {
        taskList = await Http.GetFromJsonAsync<List<TaskClass>>("Task");
    }

    protected async Task EditTask(int id)
    {
        task = await Http.GetFromJsonAsync<TaskClass>("Task/" + id);

        this.isEdit = true;
        await GetTasks().ConfigureAwait(false);
    }

    protected async Task SaveTask()
    {
        await Http.PutAsJsonAsync("Task", task);

        this.isEdit = false;
        await GetTasks();
    }

    protected async Task DeleteTask(int id)
    {
        await Http.DeleteAsync("Task/" + id);
    }


    // Modal
    protected void CloseModal()
    {
        this.isEdit = false;
    }

    // Edit task modal
    protected Boolean isEdit = false;

    // Delete task modal
    public bool DeleteDialogOpen { get; set; }

    private void OpenDeleteDialog(TaskClass _task)
    {
        DeleteDialogOpen = true;
        task = _task;
        StateHasChanged();
    }

    private async Task CloseDeleteDialog(bool accepted)
    {
        if (accepted)
        {
            await DeleteTask(task.task_id);
            taskList.Remove(task);
        }

        task = null;

        DeleteDialogOpen = false;
        StateHasChanged();
    }

}