@page "/createrole"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize(Roles = "Administrator")]

<h2>Opret en rolle</h2>
<br />

<div class="row" style=" text-align: center; place-content: center">
    <div class="col-md-4 text-left">

        <EditForm Model="role" OnValidSubmit="@(async () => await AddRole())">
            <div class="form-group">
                <label>Navn</label>
                <input type="text" for="name" class="form-control"
                       placeholder="Navn"
                       @bind="@role.Name" />
            </div>
            <div class="form-group">
                <label>Beskrivelse</label>
                <textarea type="text" for="description" class="form-control"
                          placeholder="Beskrivelse"
                          @bind="@role.Description" />
            </div>

            <div class="form-group text-center">
                <input type="reset" class="btn btn-warning" @onclick="@Cancel" value="Fortryd" />
                <input type="submit" class="btn btn-success" value="Opret en rolle" />
            </div>
        </EditForm>

    </div>
</div>


@code {
    private List<ApplicationRole> roleList;
    private ApplicationRole role = new ApplicationRole();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            await GetRoles();
        }
    }

    protected async Task GetRoles()
    {
        roleList = await Http.GetFromJsonAsync<List<ApplicationRole>>("Role");
    }

    protected async Task AddRole()
    {
        await Http.PostAsJsonAsync<ApplicationRole>("Role/", role);
        UriHelper.NavigateTo("/roles");
    }

    void Cancel()
    {
        UriHelper.NavigateTo("/roles");
    }

}
