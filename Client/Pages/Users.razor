@page "/users"
@inject HttpClient Http
@inject NavigationManager UriHelper
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView>
    <Authorized>

        <h2>Brugere</h2>
        <p>Liste over alle sidens brugere</p>

        <div style="float: right; margin-bottom: 5px">
            <button type="button" class="btn btn-primary"
                    @onclick='@(() => UriHelper.NavigateTo("/createuser"))'>
                Opret bruger
            </button>
        </div>

        @if (userList == null)
        {
            <p><em>Indlæser, vent venligst...</em></p>
        }
        else
        {
            <table class="table table-borderless table-openair table-hover">
                <thead>
                    <tr>
                        <th>Navn</th>
                        <th>Email</th>
                        <th>Fødselsdato</th>
                        <th>Oprettelsesdato</th>
                        <th>Seneste ændring</th>
                        <th style="width: 0px">&nbsp;</th>
                        <th style="width: 0px">&nbsp;</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var _user in userList)
                    {
                        <tr>
                            <td>@_user.GetFullName()</td>
                            <td>@_user.GetEmail()</td>
                            <td>@_user.GetBirthDate().ToString("d. MMM yyyy")</td>
                            <td>@_user.GetCreated().ToString("dd-MM-yyyy HH:mm")</td>
                            <td>@_user.GetModified().ToString("dd-MM-yyyy HH:mm")</td>
                            <td>
                                <button class="btn btn-primary btn-sm" @onclick="@(async () => await EditUser(_user.Id))">
                                    Rediger
                                </button>
                            </td>
                            <td>
                                <div style="float: right">
                                    <button type="button" class="btn btn-danger btn-sm"
                                            @onclick="() => OpenDeleteDialog(_user)">
                                        Fjern
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            if (isEdit)
            {
                <div class="modal" tabindex="-1" style="display: block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content modal-openair">
                            <div class="modal-header" style="border: none">
                                <h3 class="modal-title">Rediger bruger</h3>
                                <button type="button" class="close" @onclick="@this.CloseModal">
                                    <span aria-hidden="true">
                                        &times;
                                    </span>
                                </button>
                            </div>
                            <div class="modal-body" style=" overflow: auto; max-height: 75vh">
                                <form>
                                    <div class="form-group">

                                        <label for="UserFirstName" class="control-label"> Fornavn</label>
                                        <input type="text" for="UserFirstName" class="form-control" @bind="@user.FirstName" /><br />

                                        <label for="UserLastName" class="control-label"> Efternavn</label>
                                        <input type="text" for="UserLastName" class="form-control" @bind="@user.LastName" /><br />

                                        <label for="TaskVolunteer" class="control-label"> Email</label>
                                        <input type="text" for="TaskFrivillig" class="form-control" @bind="@user.Email" /><br />

                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer" style="border: none">
                                <button type="button" class="btn btn-warning" @onclick="@CloseModal">
                                    Fortryd
                                </button>
                                <button type="button" class="btn btn-block btn-success" @onclick="@(async () => await SaveUser())" data-dismiss="modal">
                                    Gem
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }

        @if (DeleteDialogOpen)
        {
            <UserDialog Title="Fjern"
                        Text="Er du sikker på, at du ønsker du at fjerne denne bruger?"
                        OnClose="@CloseDeleteDialog"
                        DialogType="UserDialog.Type.DeleteCancel">
            </UserDialog>
        }

    </Authorized>
    <NotAuthorized>
        <p>Du har ikke adgang til denne side.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private List<ApplicationUser> userList;
    private ApplicationUser user;


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            await GetUsers();
        }
    }

    protected async Task GetUsers()
    {
        userList = await Http.GetFromJsonAsync<List<ApplicationUser>>("User");
    }

    protected async Task EditUser(string id)
    {
        user = await Http.GetFromJsonAsync<ApplicationUser>("User/" + id);

        this.isEdit = true;
        await GetUsers().ConfigureAwait(false);
    }

    protected async Task SaveUser()
    {
        await Http.PutAsJsonAsync("User", user);

        this.isEdit = false;
        await GetUsers();
    }

    protected async Task DeleteUser(string id)
    {
        await Http.DeleteAsync("User/" + id);
    }


    // Modal
    protected void CloseModal()
    {
        this.isEdit = false;
    }

    // Edit user modal
    protected Boolean isEdit = false;

    // Delete user modal
    public bool DeleteDialogOpen { get; set; }

    private void OpenDeleteDialog(ApplicationUser _user)
    {
        DeleteDialogOpen = true;
        user = _user;
        StateHasChanged();
    }
    private async Task CloseDeleteDialog(bool accepted)
    {
        if (accepted)
        {
            await DeleteUser(user.Id);
            userList.Remove(user);
        }

        user = null;

        DeleteDialogOpen = false;
        StateHasChanged();
    }

}