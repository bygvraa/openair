@using OpenAir.Shared.Models
@inject HttpClient Http
@inject NavigationManager uriHelper
@inject IJSRuntime js

<div class="modal fade show" id="LoginModal"
     style="display: block; background-color: rgba(247, 247, 247, .7);"
     aria-modal="true" role="dialog">

    <div class="modal-dialog">
        <div class="modal-content"
             style="background-color: rgba(247, 247, 247, .95); border: 2px solid rgba(0,0,0,.2);">
            
            <div class="modal-header" style="border: none">
                <h4 class="modal-title">
                    Log på
                </h4>
                <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
            </div>

            <div class="modal-body">
                <div style="text-align: center; margin-left: 20%; margin-right: 20%">
                    <div style=" text-align: left">
                        <div>
                            <input placeholder="Email" @bind="email" class="logininfo" /><br />
                        </div>
                        <div>
                            <input placeholder="Adgangskode" @bind="password" class="logininfo" />
                        </div>
                    </div>
                    <button class="btn btn-login" @onclick="() => startLogin(email, password)"
                            style="margin-top: 10px; margin-bottom: 10px; width: 100% ">
                        Login
                    </button><br />
                    <NavLink href="/createuser" @onclick="@ModalCancel">
                        Mangler du en bruger?
                    </NavLink>
                </div>
            </div>

            <div class="modal-footer" style="border: none">
            </div>

        </div>
    </div>

</div>


    @code {
        public string email;
        public string password;

        public UserClass[] users;

        protected override async Task OnInitializedAsync()
        {
            users = await Http.GetFromJsonAsync<UserClass[]>("User");
        }

        public void startLogin(string email, string password)
        {
            foreach (var user in users)
            {
                if (user.email == email && user.password == password)
                {
                    if (user.role == null)
                    {
                        ModalCancel();
                        uriHelper.NavigateTo($"/");
                        break;

                    }
                    else if (user.role == user.role)
                    {
                        uriHelper.NavigateTo($"Counter");
                        break;
                    }
                    else
                    {
                        js.InvokeVoidAsync("alert", $"User access not permitted");
                        break;
                    }
                }
            }
        }


        [Parameter] public EventCallback<bool> OnClose { get; set; }

        private Task ModalCancel()
        {
            return OnClose.InvokeAsync(false);
        }
        private Task ModalOk()
        {
            return OnClose.InvokeAsync(true);
        }

    }
